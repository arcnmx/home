substitutions:
  log_level: DEBUG
  kitchen_wifi_prio: "5"
  closet_wifi_prio: "2"

esphome:
  name: ${node_name}
  build_path: ./build/${node_name}

wifi:
  fast_connect: false
  networks:
    - ssid: !secret closet_wifi_ssid
      password: !secret closet_wifi_password
      bssid: !secret closet_wifi_bssid
      priority: ${closet_wifi_prio}
    - ssid: !secret kitchen_wifi_ssid
      password: !secret kitchen_wifi_password
      #bssid: !secret kitchen_wifi_bssid
      priority: ${kitchen_wifi_prio}

ota:
  password: !secret ota_password
  safe_mode: true

api:
  encryption:
    key: !secret api_key

time:
  - platform: homeassistant
    id: esptime

logger:
  level: ${log_level}

button:
  - platform: restart
    name: "${friendly_name} Restart"

text_sensor:
  - platform: template
    name: ${friendly_name} Uptime
    id: uptime_human
    entity_category: diagnostic
    disabled_by_default: true
    icon: mdi:clock-start

binary_sensor:
  - platform: status
    name: ${friendly_name} Status

sensor:
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    update_interval: 60s
  - platform: uptime
    name: ${friendly_name} Uptime Seconds
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
